name: CI Pipeline

on: 
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to latest version
        with:
          fetch-depth: 0  # Ensures full git history for DVC

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git-lfs awscli

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc dvc-gdrive dvc-s3 python-dotenv awscli

      - name: Configure Git LFS
        run: |
          git lfs install
          git lfs pull

      - name: Configure DagsHub credentials
        env:
          DAGSHUB_TOKEN: ${{ secrets.MLOPS_PROJECT }}
        run: |
          mkdir -p ~/.config/dagshub
          echo "[auth]" > ~/.config/dagshub/credentials.ini
          echo "token = $DAGSHUB_TOKEN" >> ~/.config/dagshub/credentials.ini

      - name: Set up DVC
        env:
          MLOPS_PROJECT: ${{ secrets.MLOPS_PROJECT }}
          DAGSHUB_TOKEN: ${{ secrets.MLOPS_PROJECT }}
        run: |
          dvc pull || true  # Attempt to pull data, continue if fails
          dvc status

      - name: Run DVC Reproduction
        env:
          MLOPS_PROJECT: ${{ secrets.MLOPS_PROJECT }}
          PYTHONPATH: ${{ github.workspace }}
          DAGSHUB_TOKEN: ${{ secrets.MLOPS_PROJECT }}
        run: |
          dvc repro

      - name: Promote Model to Production
        if: success()
        env:
          MLOPS_PROJECT: ${{ secrets.MLOPS_PROJECT }}
          PYTHONPATH: ${{ github.workspace }}
        run: python scripts/promote_model.py

      - name: Run Flask App Tests
        if: success()
        env:
          MLOPS_PROJECT: ${{ secrets.MLOPS_PROJECT }}
          PYTHONPATH: ${{ github.workspace }}
        run: python -m unittest tests/test_flask_app.py

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Cleanup
        if: always()
        run: |
          docker logout
          aws ecr batch-delete-image --repository-name ${{ secrets.ECR_REPOSITORY }} --image-ids imageTag=temp || true
